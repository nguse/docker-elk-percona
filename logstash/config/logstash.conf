input {
	# tcp {
	# 	port => 5000
	# }
	file {
		path => "/logs/general-*.log"
		start_position => "beginning"
		type => "percona_general"
		codec => multiline {
			pattern => "^((?:\d\d)%{MONTHNUM}%{MONTHDAY} %{HOUR}:%{MINUTE}:%{SECOND}|\s+%{BASE10NUM:SESSION_ID}\s+)"
			negate => true
			what => previous
		}
	}
}

filter {
	if [type] == "percona_general" {
		grok {
			match => [
				# Connect statements
				"message", "^(?<TIMESTAMP>(?:\d\d)%{MONTHNUM}%{MONTHDAY} %{HOUR}:%{MINUTE}:%{SECOND})?\s+%{BASE10NUM:SESSION_ID}\s+(?<ACTION>Connect)\s+%{DATA:USERNAME}@(?<CLIENT>%{IP}|%{HOSTNAME}) on %{DATA:DATABASE_NAME}$",

				# Start/Commit transaction statements
				"message", "^(?<TIMESTAMP>(?:\d\d)%{MONTHNUM}%{MONTHDAY} %{HOUR}:%{MINUTE}:%{SECOND})?\s+%{BASE10NUM:SESSION_ID}\s+(?<ACTION>Query)\s+(?<QUERY>(?<QUERY_TYPE>start transaction|START TRANSACTION|commit|COMMIT)).*",

				# Query statements
				# Collect table on INSERT, UPDATE, DELETE, TRUNCATE
				"message", "^(?<TIMESTAMP>(?:\d\d)%{MONTHNUM}%{MONTHDAY} %{HOUR}:%{MINUTE}:%{SECOND})?\s+%{BASE10NUM:SESSION_ID}\s+(?<ACTION>Query)\s+(?<QUERY>(?<QUERY_TYPE>insert into|INSERT INTO|update|UPDATE|delete from|DELETE FROM|truncate table|TRUNCATE TABLE)\s+(?<TABLE>\w+)\s+.{1,20000}).*",
				"message", "^(?<TIMESTAMP>(?:\d\d)%{MONTHNUM}%{MONTHDAY} %{HOUR}:%{MINUTE}:%{SECOND})?\s+%{BASE10NUM:SESSION_ID}\s+(?<ACTION>Query)\s+(?<QUERY>(?<QUERY_TYPE>\w+)\s+.{1,20000}).*",

				# Quit statements
				"message", "^(?<TIMESTAMP>(?:\d\d)%{MONTHNUM}%{MONTHDAY} %{HOUR}:%{MINUTE}:%{SECOND})?\s+%{BASE10NUM:SESSION_ID}\s+(?<ACTION>Quit)\s+$"
			]
			remove_field => [ "message" ]
		}

		# Now what we want to do is map SESSION_ID back to CLIENT so we store the CLIENT on every record
		# We do this using the aggregate filter plugin
		memorize {
			fields => [ "TIMESTAMP" ]
			default => { "TIMESTAMP" => "170101 01:00:00" }
		}

		# Parse the date
		date {
			match => [ "TIMESTAMP", "YYMMdd HH:mm:ss"]
			timezone => "America/New_York"
		}

		# Map new client connection
		if [ACTION] == "Connect" {
			aggregate {
				task_id => "%{SESSION_ID}"
				code => "map['CLIENT'] = event.get('CLIENT')"
				map_action => "create"
			}
		}

		# Set CLIENT for a matching session action
		if [ACTION] == "Query" {
			aggregate {
				task_id => "%{SESSION_ID}"
				code => "event.set('CLIENT', map['CLIENT'])"
			}
		}

		# Cleanup
		if [ACTION] == "Quit" {
			aggregate {
				task_id => "%{SESSION_ID}"
				code => "event.set('CLIENT', map['CLIENT'])"
				end_of_task => true
			}
		}
	}
}

output {
	elasticsearch {
		hosts => "elasticsearch:9200"
	}
}
